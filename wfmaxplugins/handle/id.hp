//=============================================================================
// id.hp
// Copyright 1997 Recombinant Limited. All Rights Reserved.
//
// This is UNPUBLISHED PROPRIETARY SOURCE CODE of Recombinant Limited
// The contents of this file may not be disclosed to third parties, copied
// or duplicated in any form, in whole or in part, without the prior written
// permission of Recombinant Limited
// ===========================================================================
// History:
// ?? ??? ??	WBNIV	Created
//============================================================================

#pragma once

#include <assert.h>
#include <string.h>
#include <ostream>

class ID
{
public:
	ID()
	{
	}
	ID( const char* szId )
	{
		assert( strlen( szId ) <= 4 );
		char temp[ 5 ];
		temp[ 0 ] = temp[ 1 ] = temp[ 2 ] = temp[ 3 ] = temp[ 4 ] = '\0';
		strcpy( temp, szId );
		_id = *((unsigned long*)temp);
	}
	ID( unsigned long id )
	{
		_id =char( id>>24 ) | char( id>>16 )<<8 | char( id>>8 )<<16 | char( id&0xFF )<<24;
	}

	unsigned long operator()() const
	{
		return _id;
	}

	unsigned long operator=(const unsigned long newValue)
	{
		_id = newValue;
		return _id;
	}

	bool operator==( const ID& _otherId ) const
	{
		return _id == _otherId._id;
	}
	friend ostream& operator<< ( ostream& os, const ID& id )
	{
		id._print( os );
		return os;
	}
	void _print( ostream& os ) const
	{
		char ch;

//		os << '\'';
		if ( ch = char( _id&0xFF ) ) os << ch;
		if ( ch = char( _id>>8 ) ) os << ch;
		if ( ch = char( _id>>16 ) ) os << ch;
		if ( ch = char( _id>>24 ) ) os << ch;
//		os << '\'';
	}

protected:
	unsigned long _id;
};
