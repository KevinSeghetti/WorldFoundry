//============================================================================
// asset.hp:
// Copyright (c) 1996-1999, World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org
//==============================================================================
/* Documentation:

	Abstract:
			class containing array of assets, plua s class for packing asset id's
	History:
			Created	6/19/96 11:51AM Kevin T. Seghetti

	Class Hierarchy:
			none

	Dependancies:
		PIGS, STL, iostream
	Restrictions:

	Example:
*/
//============================================================================

// use only once insurance
#ifndef _aSSET_HP
#define _aSSET_HP

//============================================================================

#include "global.hp"
//#include "pigtool.h"
#include <string>
#include <vector>
using namespace std;

//============================================================================

class AssetExtensions
{
	vector<string> extensions;
public:
	AssetExtensions() {}
	~AssetExtensions() {}
	void Load(istream& in);
	void Save(ostream& out);

	string operator[](int index);
	int Lookup(string extension);
};

//============================================================================

#if 0
class packedAssetID
{
	enum
	 {
		INDEX_BITLENGTH = 12,
		ROOM_BITLENGTH = 12,
		TYPE_BITLENGTH = 8,

		INDEX_B = 0,
		ROOM_B = INDEX_B+INDEX_BITLENGTH,
		TYPE_B = ROOM_B+ROOM_BITLENGTH,

		INDEX_LENGTH = 1 << INDEX_BITLENGTH,
		ROOM_LENGTH = 1 << ROOM_BITLENGTH,
		TYPE_LENGTH = 1 << TYPE_BITLENGTH,

		INDEX_M = 0XFFF,
		ROOM_M = 0XFFF << 	ROOM_B,
		TYPE_M = 0XFF << TYPE_B
	 };

public:
	enum { PERMANENT_ROOM = ROOM_LENGTH-1 }; 						// set to 0xfff
	packedAssetID() { packedID = 0; }
	packedAssetID(int32 newPackedID) { packedID = newPackedID; }
	int32 Room(void) const { return((ROOM_M & packedID) >> ROOM_B); }
	int32 Type(void) const { return((TYPE_M & packedID) >> TYPE_B); }
	int32 Index(void) const { return((INDEX_M & packedID) >> INDEX_B); }

	int32 Room(int32 newRoom) { assert(newRoom >= 0); assert(newRoom < ROOM_LENGTH); packedID = (packedID & ~ROOM_M) | ((newRoom << ROOM_B) & ROOM_M); return(Room()); }
	int32 Type(int32 newType) { assert(newType >= 0); assert(newType < TYPE_LENGTH); packedID = (packedID & ~TYPE_M) | ((newType << TYPE_B) & TYPE_M); return(Type()); }
	int32 Index(int32 newIndex) { assert(newIndex >= 0); assert(newIndex < INDEX_LENGTH); packedID = (packedID & ~INDEX_M) | ((newIndex << INDEX_B) & INDEX_M); return(Index()); }

	int32 PackedID(void) const { return(packedID); }

	friend ostream& operator<<(ostream& s, const packedAssetID &p) { return s << "Room: " << p.Room() << ", Type: " << p.Type() << ", Index: " << p.Index(); }
private:
	int32 packedID;
};
#endif
//============================================================================
#endif
//============================================================================
