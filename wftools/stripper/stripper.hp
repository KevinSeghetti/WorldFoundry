//==============================================================================
// stripper.hp
// Copyright (c) 1996-1999, World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org
//==============================================================================

#pragma once

#include <vector>
using namespace std;

#include "types.hp"
#include <gfx/face.hp>
#include <iff/iffread.hp>

void stripper( const char* szInputFilename );

class RenderObject3D;
class IffWriter;

class Stripper
{
public:
	Stripper( RenderObject3D& );
	virtual ~Stripper();

	void LoadAnimChunks( IFFChunkIter& animChunkIter );
	void save( _IffWriter& );

protected:
	void _convertToStrips();
	RenderObject3D& _ro3d;
	int _materialCount;

	enum { _MAX_MATERIALS = 500 };
	std::vector< TriFace > _face[ _MAX_MATERIALS ];

	// This is temp storage for the animation compressor
	// inner dimension = frame number, outer dimension = vertex number
	std::vector< std::vector<Vertex3D> > _animVertexList;
};
