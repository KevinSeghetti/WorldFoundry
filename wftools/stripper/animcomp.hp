//==============================================================================
// animcomp.hp:		Animation compressor class for use in STRIPPER.EXE
//					This object holds one ANIM chunk and saves itself as one
//					CANM chunk; one ANIM chunk holds all frames for one anim cycle.
// Created 11/14/97 19:10 by Phil Torre
// Copyright (c) 1998-1999, World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org
//==============================================================================

#pragma once

#include <vector>
using namespace std;
#include <gfx/vertex.hp>

//// Fun typedefs that will allow me to include levelcon.h
//typedef Scalar fixed32;
//typedef unsigned short uint16;
//typedef unsigned char  uint8;
#include <../source/levelcon.h>

class IFFChunkIter;
class IffWriter;

class AnimationCompressor
{
public:
	AnimationCompressor( IFFChunkIter& animChunkIter );

	void Save( IffWriter& );

protected:
	void _WriteChannel( int32* sampleArray, int frameRate, IffWriter& iffOut);

	int16 _frameCount;
	int   _vertexCount;

	// _animVertexList[n] = vector<Vertex3D>, the vertex list for frame n
	std::vector< std::vector<Vertex3D> > _animVertexList;
};
