//=============================================================================
// IFFDataBase.hpi: Copyright (c) 1996-1999, World Foundry Group  
// By Kevin T. Seghetti
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org
//==============================================================================

inline
IFFDataBase::IFFDataBase(binistream& input, const ChunkList& chunkList) :
	_input(input), _ind(0), _chunkList(chunkList), _topChunk()
{
	IFFChunkIter topIter(input);
	_topChunk = IFFDataBaseChunk(topIter,*this);
}

//=============================================================================

inline bool
IFFDataBase::IsWrapperChunk(ChunkID id) const
{
	int index = _chunkList.Lookup(id);
	return index==-1?false:true;
}

//=============================================================================

inline const IFFDataBaseChunk&
IFFDataBase::GetTopChunk() const
{
	return _topChunk;
}

//=============================================================================

inline ostream& operator<<(ostream& out,IFFDataBase& db)
{
	out << db._topChunk << endl;
	return out;
}

//=============================================================================

inline void
IFFDataBaseChunk::Validate() const
{
	assert(_size > 0);
	if(_hasChildren)
	{
		assert(_data == NULL);
		vector<SmartPtr<IFFDataBaseChunk> >::const_iterator iter = _children.begin();
		while(iter != _children.end())
		{
			iter->Validate();
			iter++;
		}
	}
	else
	{
		assert(ValidPtr(_data));
		// kts temp
		assert(_data > (void*)0x100);
		assert(ValidPtr(_data+_size));
		assert(_children.size() == 0);
	}
}

//=============================================================================

inline ostream&
operator<<(ostream& out,IFFDataBaseChunk& chunk)
{
	chunk.Print(out,Indent(0));
	return out;
}

//=============================================================================

inline const IFFDataBaseChunk*
IFFDataBaseChunk::GetChildChunk(ChunkID id) const
{
	vector<SmartPtr<IFFDataBaseChunk> >::const_iterator iter = _children.begin();
	while(iter != _children.end())
	{
		const SmartPtr<IFFDataBaseChunk>& temp = (**iter);
		(*temp).GetName();
		if((*(*iter)).GetName() == id)
			return(&**iter);
		++iter;
	}
	return NULL;
}

//=============================================================================

inline const char*
IFFDataBaseChunk::GetChunkData() const
{
	return _data;
}

//=============================================================================

inline int
IFFDataBaseChunk::GetChunkSize() const
{
	return _size;
}

//=============================================================================

inline ChunkID
IFFDataBaseChunk::GetName() const
{
	return _name;
}

//=============================================================================
