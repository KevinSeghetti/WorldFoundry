//==============================================================================
// udm.hp: Copyright (c) 1998-1999, World Foundry Group  
// Description: DataType class hierarchy
// Original Author: Kevin T. Seghetti
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org
//==============================================================================

DataType
ConstructDataType(IFFChunkIter& chunkIter);

//==============================================================================

class DataType
{
	virtual size_t Size() const = 0;

	friend ostream& operator<<(ostream& out, const DataType& data) { data.Print(out); return out; }
	virtual void Read(binistream& in) = 0;
	virtual void Write(binostream& out) const = 0;
	const IFFChunk* LookupChunk(ChunkID id);
protected:
	virtual void Print(ostream& out) const = 0;
};

//=============================================================================

class DataType_Array : public DataType
{

};

//=============================================================================

class DataType_I32 : public DataType
{
public:
	DataType_I32(IFFChunkIter& iter);

	size_t Size();
	virtual void Read(binistream& in);
	virtual void Write(binostream& out) const;
protected:
	virtual void Print(ostream& out) const;

	int32 _value;
};

//=============================================================================

class DataType_STRU : public DataType
{
public:
	DataType_STRU(IFFChunkIter& iter);

	size_t Size();
	virtual void Read(binistream& in);
	virtual void Write(binostream& out) const;
protected:
	virtual void Print(ostream& out) const;

	vector<DataType*> _struct;
};

//=============================================================================

class DataType_IFFC : public DataType
{
public:
	DataType_IFFC(IFFChunkIter& iter);

	size_t Size();
	virtual void Read(binistream& in);
	virtual void Write(binostream& out) const;
protected:
	virtual void Print(ostream& out) const;

	char* _buffer;
	size_t _size;
};

//=============================================================================
