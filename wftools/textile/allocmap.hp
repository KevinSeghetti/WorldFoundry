//==============================================================================
// allocmap.hp:
// Copyright (c) 1995-1999, World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org
//==============================================================================

#ifndef ALLOCMAP_HP
#define ALLOCMAP_HP

#include <pigsys/assert.hp>

#include "types.h"

class Bitmap;

typedef int Allocation;

typedef struct
{
	int width, height;
	int x_align;
	int y_align;
	bool bAlignToSizeMultiple;
	int k;
} AllocationRestrictions;


class AllocationMap
{
public:
//	AllocationMap( const int width, const int x_align=1, const int height=1, const int y_align=1 );
	AllocationMap( const AllocationRestrictions& );
	~AllocationMap();

	void reset();
	bool find( Bitmap* dstBitmap, Bitmap* srcBitmap, int, int& x, int& y );
	bool checkIfFits( Bitmap* out_bitmap, Bitmap* srcBitmap, int x, int y,
		int srcWidth, int srcHeight );
	void mark( const int x, const int y, const int srcWidth, const int srcHeight, const int i );

	// Printing
	void print() const;				// debug

	//void cropUnused();

	int xExtent() const;
	int yExtent() const;

	int xAlign() const			{ return _x_align; }
	int yAlign() const			{ return _y_align; }

	int	k() const				{ return _k; }

protected:
	enum { UNALLOCATED = -1 };
	Allocation* _theTable;
	int _x_slots, _y_slots;
	int _xMaxAllocated, _yMaxAllocated;
	int _x_align, _y_align;
	bool _bAlignToSizeMultiple;
	int _k;
};

#endif
