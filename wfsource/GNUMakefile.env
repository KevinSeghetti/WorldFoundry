#===============================================================================
## GNUmakefile.env: environment reading for source
## Macro Definitions -- most allow passing in a default from the environment
## or on the command line.  (Defaults are shown in parentheses.)
#===============================================================================
## PIGS_OBJS_DIR (..)
## WF_TARGET (win)	[win|psx]
## BUILDMODE (debug)    [buildmodes are listed in Makefile.bld]
## SCALAR_TYPE (fixed)	[fixed|float]
## PSX_DIR (../../../psxtools/psx)
## CCCARGS ()
## BUILD_DBSTREAM (3 if debug, 0 otherwise)	[0-5]
## MULTITHREADED (s)	[m|s]
## Windows Variables Only:
## 	SUBSYSTEM (console)	[windows|console]
##
## Test Suite Switches:
## TEST_PROG	$(LIB_NAME)test
#===============================================================================

#.SUFFIXES :
#.SUFFIXES :     .c .cc .asm

#===============================================================================

#TODO: kind of a kludge here to get this to appear first

ifndef WF_DIR
	WF_DIR:=$(shell pwd | sed -e "s/^\(.*wfsource\).*/\1/")
	export WF_DIR
endif


ifndef OAD_DIR
	OAD_DIR = $(WF_DIR)/levels.src/oad
endif


INSTALL_DIR = /usr/local

PIGS_DIR = $(WF_DIR)/source

INCLUDE = # Erase environment variable version
ifndef WF_TARGET
	WF_TARGET=linux
endif
ifndef BUILDMODE
	BUILDMODE=debug
#	BUILDMODE=release
endif
ifdef FORCEBUILDMODE
BUILDMODE=$(FORCEBUILDMODE)
endif


ifndef SCALAR_TYPE
	SCALAR_TYPE = fixed
#	SCALAR_TYPE = float
#	SCALAR_TYPE = double
endif
ifndef PIGS_OBJS_DIR
	PIGS_OBJS_DIR=$(WF_DIR)
endif
ifndef BUILD_STREAMING
	BUILD_STREAMING = hd
endif

# LIB_DIR
# PIGS_LIB -- the library being built
# LIB_OBJS


BUILDMODE_LETTERS=$(BUILDMODE)
include $(WF_DIR)/GNUMakefile.bld
BUILDMODE_LETTERS:=$(BUILDMODE_LETTERS)$(RENDERER)
BUILDMODE_LETTERS:=$(BUILDMODE_LETTERS)$(RENDERER_PIPELINE)
BUILDMODE_LETTERS:=$(BUILDMODE_LETTERS)$(PHYSICS_ENGINE)


# kts now that I have added checking for TCL I need to actually define it
# somewhere, at least until we remove TCL scripts from the sample levels
TCL := 1



include $(WF_DIR)/GNUMakefile.$(WF_TARGET)

CC = $(CC_$(WF_TARGET))
CCC = $(CCC_$(WF_TARGET))
CCC_OUT = $(CCC_OUT_$(WF_TARGET))
CCCARGS += $(CCCARGS_$(WF_TARGET))
LIBS += $(LIBS_$(WF_TARGET))
INCLUDE += $(INCLUDE_$(WF_TARGET))
#?LINKPOST
AR = $(AR_$(WF_TARGET))
LIBOUT = $(LIBOUT_$(WF_TARGET))
EXE = $(EXE_$(WF_TARGET))
RUN = $(RUN_$(WF_TARGET))
AS = $(AS_$(WF_TARGET))
AFLAGS = $(AFLAGS_$(WF_TARGET))
#?RESOURCE

## scripting languages
#CCCARGS += `perl -MExtUtils::Embed -e ccopts` 

ifdef TCL
CCCARGS += -DTCL
endif

ifdef PERL
CCCARGS += -DPERL
endif

ifdef SCHEME
CCCARGS += -DSCHEME
endif

################################################################################

INCLUDE += -I$(WF_TARGET) -I$(PIGS_DIR)
# Move this next line here from GNUMakefile.lib
INCLUDE += -I../hal/$(WF_TARGET)

#?

## Multithreaded switches
CCCARGS += $(CCCARGS_MULTITHREADED_$(MULTITHREADED))

## Define platform
## kts isn't upper case
CCCARGS += -D__$(shell echo $(WF_TARGET) | tr a-z A-Z)__



ANIM      = $(PIGS_LIB_DIR)libanim.a
ASSET     = $(PIGS_LIB_DIR)libasset.a
ATTRIB    = $(PIGS_LIB_DIR)libattrib.a
AUDIO     = $(PIGS_LIB_DIR)libaudio.a
#AUDIOFMT  = $(PIGS_LIB_DIR)libaudiofmt.a
MOVEMENT = $(PIGS_LIB_DIR)libmovement.a
MAILBOX   = $(PIGS_LIB_DIR)libmailbox.a
BASEOBJECT = $(PIGS_LIB_DIR)libbaseobject.a
CONSOLE   = $(PIGS_LIB_DIR)libconsole.a
CPPLIB    = $(PIGS_LIB_DIR)libcpplib.a
EVAL      = $(PIGS_LIB_DIR)libeval.a
FUZZY     = $(PIGS_LIB_DIR)libfuzzy.a
GFX       = $(PIGS_LIB_DIR)libgfx.a
GFXFMT    = $(PIGS_LIB_DIR)libgfxfmt.a
HAL       = $(PIGS_LIB_DIR)libhal.a
IFF       = $(PIGS_LIB_DIR)libiff.a
IFFWRITE  = $(PIGS_LIB_DIR)libiffwrite.a
INI       = $(PIGS_LIB_DIR)libini.a
INPUT     = $(PIGS_LIB_DIR)libinput.a
LOADFILE  = $(PIGS_LIB_DIR)libloadfile.a
MATH      = $(PIGS_LIB_DIR)libmath.a
MEMORY    = $(PIGS_LIB_DIR)libmemory.a
MENU      = $(PIGS_LIB_DIR)libmenu.a
PARTICLE  = $(PIGS_LIB_DIR)libparticle.a
PHYSICS   = $(PIGS_LIB_DIR)libphysics.a
PIGSYS    = $(PIGS_LIB_DIR)libpigsys.a
RECOLIB   = $(PIGS_LIB_DIR)librecolib.a
REGEXP    = $(PIGS_LIB_DIR)libregexp.a
REGISTRY  = $(PIGS_LIB_DIR)libregistry.a
RENDERASSETS = $(PIGS_LIB_DIR)librenderassets.a
ROOM      = $(PIGS_LIB_DIR)libroom.a
SAVEGAME  = $(PIGS_LIB_DIR)libsavegame.a
STREAMS   = $(PIGS_LIB_DIR)libstreams.a
SCRIPTING = $(PIGS_LIB_DIR)libscripting.a
TIMER     = $(PIGS_LIB_DIR)libtimer.a
TOOLSTUB  = $(PIGS_LIB_DIR)libtoolstub.a
VERSION   = $(PIGS_LIB_DIR)libversion.a

#===============================================================================

# do renderer

ifeq ($(RENDERER),)
error no renderer defined!
endif
CCCARGS += -DRENDERER_$(shell echo $(RENDERER) | tr a-z A-Z )

# do renderer pipeline
ifeq ($(RENDERER_PIPELINE),)
error no renderer pipeline defined!
endif
CCCARGS += -DRENDERER_PIPELINE_$(shell echo $(RENDERER_PIPELINE) | tr a-z A-Z )

CCCARGS += -DSCALAR_TYPE_$(shell echo $(SCALAR_TYPE) | tr a-z A-Z )

CCCARGS += -DPHYSICS_ENGINE_$(shell echo $(PHYSICS_ENGINE) | tr a-z A-Z )

RENDERER_PIPELINE_DIR = ./$(RENDERER_PIPELINE)pipeline

RENDERER_DIR	= ./$(RENDERER)

CCCARGS += -DBUILD_NAME="$(BUILDMODE)"
CCCARGS += -DDO_DEBUGGING_INFO=$(BUILD_DO_DEBUGGING_INFO)
#?CCCARGS += -DDO_DEBUG_VARIABLES
CCCARGS += -DDEBUG=$(BUILD_DO_DEBUG_VARIABLES)
CCCARGS += -DDO_ASSERTIONS=$(BUILD_DO_ASSERTIONS)
CCCARGS += -DDO_VALIDATION=$(BUILD_DO_VALIDATION)
CCCARGS += -DDEBUG_VARIABLES=$(BUILD_DO_DEBUG_VARIABLES)
CCCARGS += -DDO_TEST_CODE=$(BUILD_DO_TEST_CODE)
CCCARGS += -DDO_DEBUG_FILE_SYSTEM=$(BUILD_DO_DEBUG_FILE_SYSTEM)
CCCARGS += -DDO_IOSTREAMS=$(BUILD_DO_IOSTREAMS)
ifeq ($(BUILD_DO_ASSERTIONS),0)
CCCARGS += -DNDEBUG
endif

#===============================================================================

CCCARGS += -DSW_DBSTREAM=$(BUILD_DBSTREAM)
#!if "$(SOFTWARE_RENDERER)" == "true"
#CCCARGS += -DSOFTWARE_RENDERER
#!endif

ifeq ($(BUILD_STREAMING),off)
PIGSLIB_STREAM_LETTER = o
else
PIGSLIB_STREAM_LETTER = s
endif

#===============================================================================
# OBJ_DIR dir letters, left to right	[ Filename: ]
#	obj
#	BUILDMODE_LETTERS	: 	d, r		(debug, release)
# 	fixedx, float		(fixed, float math)
#   s, o        (hard disk streaming/cd streaming, streaming off)
#   (), m       (single threaded, multi threaded)
#	.               [ Extension: ]
#	win,psx		(target)
#===============================================================================

OBJ_LETTERS=obj$(BUILDMODE_LETTERS)$(SCALAR_TYPE)$(PIGSLIB_STREAM_LETTER)$(MULTITHREADED).$(WF_TARGET)

# directory containing all pigs library sub-directories
PIGS_OBJ_DIR  = $(PIGS_OBJS_DIR)/$(OBJ_LETTERS)/
PIGS_LIB_DIR  = $(PIGS_OBJ_DIR)

#===============================================================================
# only used by PIGS
# directory containing current pigs library

LIB_OBJ_DIR=$(PIGS_LIB_DIR)$(LIB_NAME)/
PIGS_LIB = $(PIGS_LIB_DIR)lib$(LIB_NAME).a

#===============================================================================
#TODO: kinda kludgey -- this allows OBJ_DIR to be defined automatically for
#libraries, but lets the tools predefine it themselves

ifndef OBJ_DIR
OBJ_DIR = $(LIB_OBJ_DIR)
endif

# This is so that make will pickup on platform specific file verients that are
# keep in sub-dirs by the name of the platform (WF_TARGET).
# example savegame/linux or audio/linux where WF_TARGET==linux
VPATH = $(WF_TARGET)

# I'm going to try to move all targets to the lib file.
#ifdef LIB_NAME
#TOP-ALL : LIBRARY_NAMES_DEFINES $(OBJ_DIR) PIGS_LIB
#endif

# kts wish the loop executed in pass 1, not as a rule
#.PHONY : LIBRARY_NAMES_DEFINES
#LIBRARY_NAMES_DEFINES :
#	@echo 
#  %foreach Dir pigsys cpplib iff math streams anim attrib audio audiofmt gfxfmt console gfx hal input savegame toolstub version ini fuzzy physical movement loadfile audiofmt gfxfmt attrib particle timer menu
#    %set $(Dir,uc) $(PIGS_OBJ_DIR)/lib$(Dir).a
#    %echo $($(Dir,UC))
#  %end

################################################################################
## Rules

# Should these not be in the .rul file???, moved them there.
# All but the very next line are already in the .rul file!
#.PATH.cc = .;./$(RENDERER_PIPELINE_DIR);$(RENDERER_DIR);./$(WF_TARGET)/;
##.PATH.cc = .;./$(WF_TARGET)/;
#.PATH.c = .;$(WF_TARGET)
#.PATH.asm = .;$(WF_TARGET)		 	


# Why are we including the .rul file here in the .env file?
# Included all the .lib stuff into .rul (some already was!) and then in the
# lower level make files include .rul in place of .lib, thus don't want it here.
#include $(WF_DIR)/GNUMakefile.rul

# Will include these next 2 targets at the BOTTOM of the .rul file, as they
# are being called AFTER the .rul file was being included.
#$(OBJ_DIR) :
#	$(MKDIR) -p $(OBJ_DIR)
	
#$(OAD_DIR) :
#	$(MKDIR) -p $(OAD_DIR)

