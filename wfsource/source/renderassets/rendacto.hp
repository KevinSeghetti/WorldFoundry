//============================================================================
// rendacto.hp: RenderActor: interface between game and renderer
// Copyright (c) 1997,1999,2000,2001,2002,2003 World Foundry Group.  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//============================================================================
// Original Author: Kevin T. Seghetti
//=============================================================================
// kts unsure how this should interface with the game in an efficient yet elegant manner
// should we keep pointers to the actor we are in (wastes memory), should we
// pass a pointer to it in each frame (slow), since we are imbeded in the actor,
// we could do pointer math to find it (ugly and dangerous)
// since the first 4 params are passed in registers, I will try passing a pointer
// and see how it goes (if it ends up inlined, this is the best approach)
//============================================================================

#ifndef _RENDERACTOR_HP
#define _RENDERACTOR_HP

//============================================================================

#include <pigsys/pigsys.hp>
#include <iff/iffread.hp>
#include <memory/memory.hp>
#include <physics/physical.hp>
#include <gfx/camera.hp>
#include <gfx/material.hp>
#include <gfx/callbacks.hp>
#include <anim/anim.hp>
#include <anim/animcycl.hp>
#include <anim/channel.hp>
#include <particle/emitter.hp>
#include <asset/assets.hp>

//============================================================================

class RenderActor
{
public:
	RenderActor();
	virtual ~RenderActor();
	virtual void Render(RenderCamera& renderCamera, const PhysicalObject& physicalObject, const Clock& currentTime) = 0;
	virtual void SetAnimationCycle(int cycle) = 0;
	virtual bool GetHandle(const HandleID thisHandle, Vector3& position) const = 0;
	void Validate() const;
#if DO_VALIDATION
	virtual void _Validate() const = 0;
#endif
private:
};

//============================================================================

class RenderActorNULL : public RenderActor
{
public:
	RenderActorNULL() {};
	virtual ~RenderActorNULL();
	virtual void Render(RenderCamera& renderCamera, const PhysicalObject& physicalObject, const Clock& currentTime);
	virtual void SetAnimationCycle(int cycle);
	virtual bool GetHandle(const HandleID thisHandle, Vector3& position) const;
#if DO_VALIDATION
	virtual void _Validate() const;
#endif

private:
};

extern RenderActorNULL NULLRenderActor;

//============================================================================

class RenderActor3D : public RenderActor
{
public:
	RenderActor3D(Memory& memory);
	RenderActor3D(Memory& memory, binistream& input,int32 userData, const GfxCallbacks& callbacks);
	virtual ~RenderActor3D();
	virtual void Render(RenderCamera& renderCamera, const PhysicalObject& physicalObject, const Clock& currentTime);
	virtual void SetAnimationCycle(int cycle);
	virtual bool GetHandle(const HandleID thisHandle, Vector3& position) const;
#if DO_VALIDATION
	virtual void _Validate() const;
#endif
protected:
	RenderActor3D(Memory& memory, int vertexCount,Vertex3D* vertexList,int faceCount, TriFace* faceList, Material*  materials);
	RenderObject3D _object;
private:
};

//============================================================================

class ScrollingMatte;

class RenderActorMatte : public RenderActor
{
public:
	RenderActorMatte(Memory& memory, const _Mesh& mesh, int32 userData, AssetManager& assetManager, GfxCallbacks& gfxCallbacks);
	virtual ~RenderActorMatte();
	virtual void Render(RenderCamera& renderCamera, const PhysicalObject& physicalObject, const Clock& currentTime);
	virtual void SetAnimationCycle(int cycle);
	virtual bool GetHandle(const HandleID thisHandle, Vector3& position) const;
#if DO_VALIDATION
	virtual void _Validate() const;
#endif
protected:
	ScrollingMatte *_bgMatte;
   int32 _userData;
   const _Mesh& _mesh;
   const TileMap* _map;

//	RenderObject3D _object;
private:
};

//============================================================================

class RenderActorScarecrow : public RenderActor3D
{
public:
	RenderActorScarecrow(Memory& memory);
	RenderActorScarecrow(Memory& memory, binistream& input,int32 userData, const GfxCallbacks& callbacks, const Vector3& min, const Vector3& max );
	virtual ~RenderActorScarecrow();
	virtual void Render(RenderCamera& renderCamera, const PhysicalObject& physicalObject, const Clock& currentTime);
	virtual void SetAnimationCycle(int cycle);
	virtual bool GetHandle(const HandleID thisHandle, Vector3& position) const;
#if DO_VALIDATION
	virtual void _Validate() const;
#endif
protected:
	//RenderActorScarecrow( Memory& memory );
	//RenderObject2D _object;
private:
	Vertex3D* _vertexList;
	Material* _materialList;
	RenderActorScarecrow();
	FnChannel _channel;
	int _nTextures;
	const Texture* * _texture;
    const PixelMap* _texturePixelMap;
	Scalar _frameRate;
	uint8* _flipbook;
	int _nFrames;
};

//============================================================================

class RenderActor3DAnimates : public RenderActor3D
{
public:
	RenderActor3DAnimates(Memory& memory, binistream& input,int32 userData, const GfxCallbacks& callbacks);
	virtual ~RenderActor3DAnimates();
	virtual void Render(RenderCamera& renderCamera, const PhysicalObject& physicalObject, const Clock& currentTime);
	virtual void SetAnimationCycle(int cycle);
#if DO_VALIDATION
	virtual void _Validate() const;
#endif
private:
	RenderActor3DAnimates();				// must supply with iff data
	AnimationCycleArray _cycles;		// must be after RenderActor3D so the iff reading occurs in the correct order
};

//============================================================================

class RenderActor3DBox : public RenderActor3D
{
public:
	RenderActor3DBox(Memory& memory, const Vector3 min, const Vector3 max);
	virtual ~RenderActor3DBox();
#if DO_VALIDATION
	virtual void _Validate() const;
#endif
private:
	RenderActor3DBox();				// must supply with box shape
	//Vertex3D* _vertexList;
	//Material* _materialList;
};

//============================================================================

class RenderActorEmitter : public RenderActor
{
public:
	RenderActorEmitter( Memory&, const _Mesh& mesh, Emitter::EmitterParameters&, Emitter::ParticleParameters&, const Clock& );
	virtual ~RenderActorEmitter();
	virtual void Render( RenderCamera&, const PhysicalObject& physicalObject, const Clock& currentTime);
	virtual void SetAnimationCycle( int cycle );
	virtual bool GetHandle( const HandleID, Vector3& position ) const;
#if DO_VALIDATION
	virtual void _Validate() const;
#endif

private:
	Emitter _emitter;
};

//============================================================================
#include "rendacto.hpi"
//============================================================================
#endif
//============================================================================
