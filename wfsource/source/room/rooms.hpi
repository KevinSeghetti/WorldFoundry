//============================================================================
// rooms.hpi: LevelRooms.hpi
// Copyright (c) 1997,1999,2000,2003 World Foundry Group.  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//============================================================================
// Original Author: Kevin T. Seghetti
//=============================================================================

#ifndef _LEVELROOMS_HPI
#define _LEVELROOMS_HPI

//=============================================================================

#include "room.hp"

//=============================================================================

INLINE void
LevelRooms::Validate() const
{
#if DO_VALIDATION
	assert(ValidPtr(_rooms));
	assert(_numRooms > 0);
   assert(ValidPtr(_roomSlotMap));
   for(int index=0;index<_numRooms;index++)
   {
      _rooms[index].Validate();
      if(_roomSlotMap[index] != ADJACENT_ROOM_NULL)
         RangeCheck(0,_roomSlotMap[index],MAX_ACTIVE_ROOMS);
   }

   assert(ValidPtr(_roomCallbacks));
   _roomCallbacks->Validate();
   assert(ValidPtr(_roomArray));

   assert(ValidPtr(_levelData));
   assert(ValidPtr(_masterObjectList));
   _masterObjectList->Validate();
#endif
}

//=============================================================================

INLINE int
LevelRooms::NumberOfRooms() const
{
	Validate();
	assert(_numRooms > 0);
	return _numRooms;
}

//=============================================================================

INLINE const Room&
LevelRooms::GetRoom( int idxRoom ) const
{
	Validate();
	assert( 0 <= idxRoom );
	assert( idxRoom < _numRooms );
	return _rooms[ idxRoom ];
}

//=============================================================================

INLINE int
LevelRooms::GetSlotIndex(int roomIndex) const
{
	Validate();
	if(roomIndex == AssetManager::ROOM_PERM_INDEX)
		return(VideoMemory::PERMANENT_SLOT);
	assert(roomIndex >= 0);
	assert( roomIndex < _numRooms );
	assert(_roomSlotMap[roomIndex] >= 0);
	assert(_roomSlotMap[roomIndex] < MAX_ACTIVE_ROOMS);
	return _roomSlotMap[roomIndex];
}

//=============================================================================
#endif
//=============================================================================
