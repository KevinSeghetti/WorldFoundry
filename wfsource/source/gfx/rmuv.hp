//==============================================================================
// rmuv.hp:
// Copyright ( c ) 1994,1995,1996,1997,1998,1999,2000 World Foundry Group.  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//=============================================================================

#ifndef RMUV_HP
#define RMUV_HP

//=============================================================================

#include <pigsys/pigsys.hp>

//=============================================================================

class _RMUV
{
public:
	inline void Validate() const;

	enum { TEXTURE_NAME_LENGTH = 32 };
	char szTextureName[ TEXTURE_NAME_LENGTH+1 ];
	char nFrame;
	int16 u, v;
	int16 w, h;
	int16 palx, paly;
//	struct
//	{
		unsigned short : 10;
		unsigned short bTranslucent : 1;
		unsigned short bitdepth : 5;
//	};
};

//=============================================================================

class RMUV
{
public:
	inline RMUV();
	RMUV( void* data, int xOffset, int yOffset);

	// default assignment operator will work
//	operator= (const RMUV& other);
	inline void Validate() const;
	inline int NumEntries() const;
	_RMUV* GetRMUV( const char* szFilename, int idxMaterial = 0 ) const;

#if DO_IOSTREAMS
	friend std::ostream& operator << ( std::ostream& s, RMUV rmuv );
#endif

protected:
	_RMUV* _tblRMUV;
	int _nEntries;
};

//=============================================================================

#if DO_IOSTREAMS
std::ostream& operator << ( std::ostream& s, RMUV rmuv );
std::ostream& operator << ( std::ostream& s, _RMUV rmuv );
#endif

//=============================================================================
#include "gfx/rmuv.hpi"
//=============================================================================
#endif	// RMUV_HP
//=============================================================================
