//=============================================================================
// Camera.hpi:
// Copyright ( c ) 1997,1998,1999,2000 World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

// ===========================================================================
// Description:
// Original Author: Kevin T. Seghetti
//============================================================================

//============================================================================

INLINE const Matrix34&
RenderCamera::GetPosition()
{
	return(_position);
}

//============================================================================

INLINE void
RenderCamera::SetPosition(const Matrix34& position)
{
	assert(!_renderInProgress);			// cannot update while rendering
	_position = position;
}

//============================================================================

INLINE void
RenderCamera::SetAmbientColor(const Color& color)
{
	assert(!_renderInProgress);			// cannot update while rendering
	color.Validate();
	_ambientColor = color;
}

//============================================================================

INLINE void
RenderCamera::SetFog(const Color& color,Scalar fogNear, Scalar fogFar)
{
	assert(!_renderInProgress);			// cannot update while rendering
	color.Validate();
	_fogColor = color;
	_fogNear = fogNear;
	_fogFar = fogFar;
}

//============================================================================

INLINE void
RenderCamera::SetDirectionalLight(int lightIndex,const Vector3& direction, Color48 color)
{
//	cout << "SetDirLight: index = " << lightIndex << ", dir = " << direction << ", color = " << color << endl;
	assert(!_renderInProgress);			// cannot update lights while rendering
	RangeCheck(0,lightIndex,MAX_LIGHTS);
	_dirLightColors[lightIndex] = color;
	_dirLightDirections[lightIndex] = direction;
	assert(_dirLightDirections[lightIndex].Length() > SCALAR_CONSTANT(0.1));
	_dirLightDirections[lightIndex].Normalize();
}

//============================================================================

INLINE void
RenderCamera::Validate() const
{
	_ambientColor.Validate();
	_fogColor.Validate();
	assert(_fogNear < _fogFar);
}

//============================================================================
