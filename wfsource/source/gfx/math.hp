//=============================================================================
// Math.hp:
// Copyright ( c ) 1997,1998,1999,2000 World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

// ===========================================================================
// Description: vector and scalar abstraction for gfx library
// Original Author: Kevin T. Seghetti
//============================================================================

#ifndef _GfxMath_H
#define _GfxMath_H

//============================================================================

#include <math/vector3.hp>
#include <math/vector3p.hp>

//============================================================================

typedef Vector3_PS POLYVECT[3];

//============================================================================


#if defined(RENDERER_PIPELINE_DIRECTX)
#include <math/vector3.hp>
#include <math/matrix34.hp>
#define D3D_OVERLOADS
#include <ddraw.h>
#include <d3d.h>



inline float
ScalarToFloat(const Scalar& in)
{
	float temp = in.AsLong();
	temp /= 65536.0;
	return temp;
}

inline D3DVECTOR
Vector3ToD3DVECTOR(const Vector3& in)
{
	return D3DVECTOR(ScalarToFloat(in.X()),ScalarToFloat(in.Y()),ScalarToFloat(in.Z()));
}

inline void
Matrix34ToD3DMATRIX(D3DMATRIX& out, const Matrix34& in)
{
	out.m[0][0] = ScalarToFloat(in[0][0]);
	out.m[0][1] = ScalarToFloat(in[0][1]);
	out.m[0][2] = ScalarToFloat(in[0][2]);
	out.m[1][0] = ScalarToFloat(in[1][0]);
	out.m[1][1] = ScalarToFloat(in[1][1]);
	out.m[1][2] = ScalarToFloat(in[1][2]);
	out.m[2][0] = ScalarToFloat(in[2][0]);
	out.m[2][1] = ScalarToFloat(in[2][1]);
	out.m[2][2] = ScalarToFloat(in[2][2]);

	out.m[3][0] = ScalarToFloat(in[3][0]);
	out.m[3][1] = ScalarToFloat(in[3][1]);
	out.m[3][2] = ScalarToFloat(in[3][2]);

	out.m[0][3] = 0.0f;
	out.m[1][3] = 0.0f;
	out.m[2][3] = 0.0f;
	out.m[3][3] = 1.0f;
}

//==============================================================================

#if SW_OSTREAM

inline
ostream& operator<<(ostream& out, const D3DLVERTEX& vertex)
{
	for(int outer = 0;outer < 4; outer++)
	{
		cout << vertex.x << ","
		 	<< vertex.y << ","
		 	<< vertex.z << ";"
		 	<< vertex.color << ","
		 	<< vertex.specular << ";"
		 	<< vertex.tu << ","
		 	<< vertex.tv << endl;
	}
	return out;
}

//==============================================================================

inline
ostream& operator<<(ostream& out, const D3DMATRIX& mat)
{
	for(int outer = 0;outer < 4; outer++)
	{
		cout << "[" << outer << "] = "
			<< mat.m[outer][0] << ","
		 	<< mat.m[outer][1] << ","
		 	<< mat.m[outer][2] << ","
		 	<< mat.m[outer][3] << endl;
	}
	return out;
}

#endif			                        // SW_OSTREAM
#endif				                    // RENDERER_PIPELINE_DIRECTX

//============================================================================
#endif
//============================================================================
