//=============================================================================
// gfx/face.hp: graphics face structures
// Copyright ( c ) 1997,1998,1999,2000 World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

// ===========================================================================
// Description:
// Original Author: Kevin T. Seghetti
//============================================================================

#ifndef _Face_H
#define _Face_H

#include <gfx/math.hp>
#include <gfx/vertex.hp>

//============================================================================

//#if SW_DBSTREAM >= 1
//#ifdef __PSX__
//#include <pigsys/psx/_iostr.hp>

//static StreamOutput_stdout gfxstdout_output;
//static ostream gfxcout(gfxstdout_output);

//#define cout gfxcout
//#endif
//#endif

//============================================================================

#define TRIFACEONDISK \
	int16 v1Index,v2Index,v3Index; \
	int16 materialIndex;

struct _TriFaceOnDisk
{
	TRIFACEONDISK
};

//============================================================================

class TriFace
{
public:
	TriFace()	{}
	TriFace( int16 v0, int16 v1, int16 v2, int16 mi );		// For 2D faces only
	TriFace( int16 v0, int16 v1, int16 v2, int16 mi, Vertex3D* vertexList );		// For 3D faces only

	TRIFACEONDISK
	Vector3_PS normal;

#if defined(RENDERER_PIPELINE_DIRECTX)
	float _u[3],_v[3];
#endif

	// IOSteam support
#if DO_IOSTREAMS
	friend std::ostream& operator << ( std::ostream& s, const TriFace& tf );
#endif

// kts dummy functions, these don't actually work
    INLINE bool         operator ==	( const TriFace& ) const {return false;}
    INLINE bool         operator <	( const TriFace& ) const {return false;}
};

//============================================================================
#include "gfx/face.hpi"
//============================================================================
#endif
//============================================================================
