#=============================================================================
# source/GNUmakefile
#=============================================================================

# NEW CHANGES!!!!!!!!!! if adding and new dirs add to ALL, test, clean, clean-lib
# as per the examples below!

# WHY???
# The old way would not stop building when an error occured, it just keep going
# untill the foreach loop ended. :(
# The way it is now, the build WILL stop, but it makes for a more cumbersome
# makefile in some ways.  I think the pros out do the cons.
# NOTE, still also add to DIR_LIST, as a couple of targets still use it.

include ../GNUMakefile.env

ifndef WF_TARGET
	WF_TARGET = linux
endif

DIR_LIST =
DIR_LIST +=  audio console cpplib eval gfx iff iffwrite ini loadfile math memory menu pigsys recolib regexp savegame streams timer template toolstub
# kts note: anim must come after gfx, since it needs the renderers generated by gfx
DIR_LIST += anim renderassets
#DIR_LIST += xml
#DIR_LIST += fuzzy [broken -- missing files]
DIR_LIST += input 

DIR_LIST_win = cdda
DIR_LIST_psx = bootscrn movie profiler
# Using the new build method, these need adding by hand below. :(
DIR_LIST += $(DIR_LIST_$(WF_TARGET))

# kts physics, particle,baseobject,movement and game include things from oas
DIR_LIST += oas
DIR_LIST += baseobject asset physics movement
## Keep hal last since it's the only library that can't be built in MULTITHREADED mode
DIR_LIST += hal
DIR_LIST += particle room game
make_lib = cd $(dir) ; make $(MFLAGS); cd .. ;

.PHONY : ALL
# The problem with this approach is that it will NOT stop for errors untill the
# loop has finished.
#	$(foreach dir, $(DIR_LIST), $(make_lib) )
# So instead call each seperately, if it fails, the build will stop.
ALL : libstrm.inc
	$(MAKE) -C audio
	$(MAKE) -C console
	$(MAKE) -C cpplib
	$(MAKE) -C eval
	$(MAKE) -C recolib
	$(MAKE) -C regexp
	$(MAKE) -C loadfile
	$(MAKE) -C math
	$(MAKE) -C memory
	$(MAKE) -C pigsys
	$(MAKE) -C streams
	$(MAKE) -C toolstub
	$(MAKE) -C input
# Moved the above 8 files above gfx as they need built to build prep to
# build gfx...
#
# Build prep from here so the user does not get the error, then have to
# go build it, then come back here and make again.
ifeq ($(BUILDMODE),debug)
# kts probably not the best way to do this, but for now don't want to try to build tools in release mode
	$(MAKE) -C ../../wftools/prep/
	cp ../../wftools/prep/prep ../bin
	$(MAKE) -C ../../wftools/iffcomp/
	cp ../../wftools/iffcomp/iffcomp ../bin
endif	
	$(MAKE) -C gfx
	$(MAKE) -C iff
ifeq ($(BUILDMODE),tool)
	$(MAKE) -C iffwrite
endif
	$(MAKE) -C ini
	$(MAKE) -C menu
	$(MAKE) -C savegame
	$(MAKE) -C timer
	$(MAKE) -C template
	$(MAKE) -C oas
	$(MAKE) -C baseobject
	$(MAKE) -C anim
	$(MAKE) -C scripting
	$(MAKE) -C asset
	$(MAKE) -C physics
	$(MAKE) -C movement
	$(MAKE) -C renderassets
	$(MAKE) -C hal
	$(MAKE) -C mailbox
	$(MAKE) -C particle
	$(MAKE) -C room
	$(MAKE) -C game
	$(MAKE) -C game link


.PHONY : print
print :
	cd pigsys && ${MAKE} $(MFLAGS) $@
	@echo ========================================================================
	@echo DIR_LIST = $(DIR_LIST)

.PHONY : print_short
print_short :
	cd pigsys && ${MAKE} $(MFLAGS) $@

.PHONY : test
test : ALL
	$(MAKE) -C audio	$@
	$(MAKE) -C console	$@
	$(MAKE) -C cpplib	$@
	$(MAKE) -C eval		$@
	$(MAKE) -C gfx		$@
	$(MAKE) -C iff		$@
	$(MAKE) -C iffwrite	$@
	$(MAKE) -C ini		$@
	$(MAKE) -C loadfile	$@
	$(MAKE) -C math		$@
	$(MAKE) -C memory	$@
	$(MAKE) -C menu		$@
	$(MAKE) -C pigsys	$@
	$(MAKE) -C recolib	$@
	$(MAKE) -C regexp	$@
	$(MAKE) -C savegame	$@
	$(MAKE) -C streams	$@
	$(MAKE) -C timer	$@
	$(MAKE) -C template	$@
	$(MAKE) -C toolstub	$@
	$(MAKE) -C input	$@
	$(MAKE) -C anim		$@
	$(MAKE) -C scripting	$@
	$(MAKE) -C asset	$@
	$(MAKE) -C physics	$@
	$(MAKE) -C movement	$@
	$(MAKE) -C renderassets	$@
	$(MAKE) -C hal		$@
	$(MAKE) -C oas		$@
	$(MAKE) -C baseobject	$@
	$(MAKE) -C mailbox	$@
	$(MAKE) -C particle	$@
	$(MAKE) -C room		$@
	$(MAKE) -C game		$@

.PHONY : install
install : 
	$(MAKE) -C audio	$@
	$(MAKE) -C console	$@
	$(MAKE) -C cpplib	$@
	$(MAKE) -C eval		$@
	$(MAKE) -C gfx		$@
	$(MAKE) -C iff		$@
	$(MAKE) -C iffwrite	$@
	$(MAKE) -C ini		$@
	$(MAKE) -C loadfile	$@
	$(MAKE) -C math		$@
	$(MAKE) -C memory	$@
	$(MAKE) -C menu		$@
	$(MAKE) -C pigsys	$@
	$(MAKE) -C recolib	$@
	$(MAKE) -C regexp	$@
	$(MAKE) -C savegame	$@
	$(MAKE) -C streams	$@
	$(MAKE) -C timer	$@
	$(MAKE) -C template	$@
	$(MAKE) -C toolstub	$@
	$(MAKE) -C input	$@
	$(MAKE) -C anim		$@
	$(MAKE) -C scripting	$@
	$(MAKE) -C asset	$@
	$(MAKE) -C physics	$@
	$(MAKE) -C movement	$@
	$(MAKE) -C renderassets	$@
	$(MAKE) -C hal		$@
	$(MAKE) -C oas		$@
	$(MAKE) -C baseobject	$@
	$(MAKE) -C mailbox	$@
	$(MAKE) -C particle	$@
	$(MAKE) -C room		$@
	$(MAKE) -C game		$@
	# now create a file which the client makefile can include which sets the flags
	$(MAKE) -C game	genflags


.PHONY : uninstall
uninstall : 
uninstall :
	rm -rf $(INSTALL_DIR)/lib/WorldFoundry
	rm -rf $(INSTALL_DIR)/include/WorldFoundry

.PHONY : clean clean-lib
clean clean-lib :
	$(MAKE) -C audio	$@
	$(MAKE) -C console	$@
	$(MAKE) -C cpplib	$@
	$(MAKE) -C eval		$@
	$(MAKE) -C gfx		$@
	$(MAKE) -C iff		$@
	$(MAKE) -C iffwrite	$@
	$(MAKE) -C ini		$@
	$(MAKE) -C loadfile	$@
	$(MAKE) -C math		$@
	$(MAKE) -C memory	$@
	$(MAKE) -C menu		$@
	$(MAKE) -C pigsys	$@
	$(MAKE) -C recolib	$@
	$(MAKE) -C regexp	$@
	$(MAKE) -C savegame	$@
	$(MAKE) -C streams	$@
	$(MAKE) -C timer	$@
	$(MAKE) -C template	$@
	$(MAKE) -C toolstub	$@
	$(MAKE) -C input	$@
	$(MAKE) -C anim		$@
	$(MAKE) -C scripting	$@
	$(MAKE) -C asset	$@
	$(MAKE) -C physics	$@
	$(MAKE) -C movement	$@
	$(MAKE) -C renderassets	$@
	$(MAKE) -C hal		$@
	$(MAKE) -C particle	$@
	$(MAKE) -C room		$@
	$(MAKE) -C oas  objects.ms	
	$(MAKE) -C mailbox	$@
	$(MAKE) -C game		$@
	$(MAKE) -C oas		$@
	$(MAKE) -C baseobject	$@
	#rm -f ../bin/prep
#moved gfx to the bottom of the clean list because of a problem, see the 
#comments around the middle include in gfx/GNUmakefile for details.
#Well... game also has the same problem.

# This seems better then the old target as we know if it is out of date or not.
libstrm.inc: anim/libstrm.inc gfx/libstrm.inc memory/libstrm.inc physics/libstrm.inc movement/libstrm.inc iff/libstrm.inc scripting/libstrm.inc asset/libstrm.inc room/libstrm.inc mailbox/libstrm.inc
	cat anim/libstrm.inc gfx/libstrm.inc memory/libstrm.inc physics/libstrm.inc movement/libstrm.inc iff/libstrm.inc scripting/libstrm.inc asset/libstrm.inc room/libstrm.inc mailbox/libstrm.inc > libstrm.inc

ifeq (1,0)
.PHONY : libstrm
libstrm:
	rm -f libstrm.inc
# By doing it with cat, DIR_LIST is no longer needed? and can be done away with.
	cat gfx/libstrm.inc memory/libstrm.inc physics/libstrm.inc movement/libstrm.inc script/libstrm.inc >> libstrm.inc
#	%foreach Dir $(DIR_LIST)
#                ( cd $(Dir) , if exist libstrm.inc type libstrm.inc >>..\libstrm.inc )
#	%end
endif	
