// ------------------------------------------------------------------------
// scalar.hpi
// Copyright (c) 1997,1998,1999,2000,2002 World Foundry Group   
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

// ------------------------------------------------------------------------

// gcc register specifiers
//a        eax
//b        ebx
//c        ecx
//d        edx
//S        esi
//D        edi
//I        constant value (0 to 31)
//q,r      dynamically allocated register (see below)
//g        eax, ebx, ecx, edx or variable in memory
//A        eax and edx combined into a 64-bit integer (use long longs)


INLINE Scalar
Scalar::Invert( void ) const
{
   return Scalar(1.0/_value);
}

//-----------------------------------------------------------------------------

INLINE Scalar&
Scalar::operator *= ( const Scalar& other )
{
   _value *= other._value;
	return (*this);
}

//=============================================================================

INLINE Scalar&
Scalar::operator /= ( const Scalar& other )
{
    // catch div 0
    if(
        (other._value == 0.0) 
      )
    {
        //if(_value > 0)
        //    *this = SCALAR_CONSTANT( -32000 );
        //else
       _value = 1E+37;
       //     *this = SCALAR_CONSTANT( 32000 );
       Validate();
        return *this;
    }

    _value /= other._value;

   Validate();
	return *this;
}

// ------------------------------------------------------------------------

INLINE Scalar
Scalar::MulDiv(const Scalar b, const Scalar c) const
{
   return Scalar((_value * b._value) / c._value);
}

//=============================================================================

