//=============================================================================
// inputdig.hp:
//=============================================================================
/*
Documentation:

	Abstract:
	   		C++ class representing current and last state of
	   		an input device with buttons

	History:
			Created	by Joseph Boyle 24 Jan 95
			InputCameraRemapper class added 4/9/96 by Phil Torre


	Class Hierarchy:
			none

	Dependencies:
			none

	Restrictions:


*/
//==============================================================================

#ifndef _INPUTDIG_HP
#define _INPUTDIG_HP
#include <hal/sjoystic.h>
#include <math/vector3.hp>
#include <memory/memory.hp>

#pragma comment( lib, "winmm.lib" )

//==============================================================================

class Input
{
public:
	Input()						{ }
	virtual ~Input()			{ }

	virtual joystickButtonsF read() = 0;
	virtual joystickButtonsF readRaw() = 0;
	virtual void setButtons( joystickButtonsF ) = 0;
};


//=============================================================================

class InputNull : public Input
{
public:
	InputNull();
	virtual ~InputNull()		{ }

	virtual joystickButtonsF read();
	virtual joystickButtonsF readRaw();
	virtual void setButtons( joystickButtonsF );
};


//=============================================================================

class InputScript : public Input
{
public:
	InputScript();
	virtual ~InputScript()		{ }

	virtual joystickButtonsF read();
	virtual joystickButtonsF readRaw();
	virtual void setButtons( joystickButtonsF );

protected:
	joystickButtonsF _buttons;
};


//=============================================================================
class InputJoystick : public Input
{
public:
	InputJoystick( joystickWhich );
	virtual ~InputJoystick();

	virtual joystickButtonsF read();
	virtual joystickButtonsF readRaw();
	virtual void setButtons( joystickButtonsF )		{ assert( 0 ); }

protected:
	IJoystick _stick;
};

//=============================================================================

class QInputDigital
{
public:
	// Item joystick is not owned exclusively
	QInputDigital( Input* input, int );
	QInputDigital( Input* input, Memory& memory );
	~QInputDigital()			{ if(_memory) MEMORY_DELETE((*_memory), _input, Input); }

	void update();	// Read hardware, then update change info.
	void reset();
	void setButtons( joystickButtonsF );
	joystickButtonsF arePressed( joystickButtonsF joyMask = ~0 ) const;	// Buttons currently pressed
	joystickButtonsF justPressed( joystickButtonsF joyMask = ~0 ) const;	// Buttons just pressed this time
	joystickButtonsF justReleased( joystickButtonsF joyMask = ~0 ) const;	// Buttons pressed before last update, but now now

	joystickButtonsF arePressedRaw( joystickButtonsF joyMask = ~0 ) const;	// Buttons currently pressed
	joystickButtonsF justPressedRaw( joystickButtonsF joyMask = ~0 ) const;	// Buttons just pressed this time
	joystickButtonsF justReleasedRaw( joystickButtonsF joyMask = ~0 ) const;	// Buttons pressed before last update, but now now

	void SetInputDevice(Input* newInputDevice);
#if DEBUG
	static void test();
#endif

private:
	Memory* _memory;
	Input* _input;
	joystickButtonsF _current;
	joystickButtonsF _previous;
	joystickButtonsF _edgeDown;
	joystickButtonsF _edgeUp;
	joystickButtonsF _currentRaw;
	joystickButtonsF _previousRaw;
	joystickButtonsF _edgeDownRaw;
	joystickButtonsF _edgeUpRaw;
};

//=============================================================================
#endif
//==============================================================================

