#*============================================================================
#* OBJECT.CCS: used to create game objects
#*============================================================================
//============================================================================
// @+objectname@+.cc:
// Copyright ( c ) 1997,1999,2000 World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//=============================================================================
//
//	Abstract:
//	History:
//			Created	From object.ccs using Prep
//
//	Class Hierarchy:
//			none
//
//	Dependancies:
//
//	Restrictions:
//
//	Example:
//
//============================================================================

##include "global.hp"
##include "actor.hp"
##include "@+objectname@+.hp"
##include "oas/@+objectname@+.ht"

//============================================================================

@+objectname@+::@+objectname@+( const SObjectStartupData* startupData ) : Actor( startupData )
{
	AssertMsg( ValidPtr( startupData ), *this );
}

//============================================================================

@+objectname@+::~@+objectname@+()
{
}

//============================================================================

Actor::EActorKind
@+objectname@+::kind() const
{
	return Actor::@+objectname@+_KIND;
}

//============================================================================

void
@+objectname@+::update()
{
	Actor::update();

	// TODO: user code goes here
}

//============================================================================

Actor*
Oad@+objectname@+( const SObjectStartupData* startupData )
{
	Actor* theActor = new (*startupData->memory) @+objectname@+( startupData );
	assert( ValidPtr( theActor ) );
	return theActor;
}

//============================================================================
