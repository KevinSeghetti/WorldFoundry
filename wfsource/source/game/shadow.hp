//============================================================================
// Shadow.hp:
// Copyright ( c ) 1996,1997,1999,2000,202,2003 World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//===========================================================================
//	Abstract: Shadow Header file
//	History:
//			Created	from object.hps using prep
//
//	Class Hierarchy:
//			none
//
//	Dependancies:
//
//	Restrictions:
//
//	Example:
//
//============================================================================

#ifndef _Shadow_HP
#define _Shadow_HP

//============================================================================

#include <pigsys/pigsys.hp>
#include <oas/levelcon.h>
//#include "level.hp"
#include "actor.hp"

struct _Shadow;

//-----------------------------------------------------------------------------

class Shadow: public Actor
{
public:
	Shadow(const SObjectStartupData* startupData);
	virtual ~Shadow()			{ }

	virtual EActorKind kind() const;

	virtual void predictPosition(const Clock& currentTime);
	virtual void update();
	virtual bool isVisible() const;
	void SetShadowedObject( int32 idxActor );

private:
	void setShadowPos( const PhysicalObject& target );
	INLINE const _Shadow* getOad() const		{ return (const _Shadow*)_oadData; }
	int32 _shadowedObject;
	PhysicalObject* _floor;

	Shadow();		// not allowed
};

Actor* OadShadow(const SObjectStartupData* startupData);

//============================================================================
#endif // !_Shadow_HP
//============================================================================
