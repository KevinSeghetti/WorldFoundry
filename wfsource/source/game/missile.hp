//=============================================================================
// Missile.hp:
// Copyright ( c ) 1994,1995,1996,1997,1999,2000 World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//===========================================================================
// Description: The Missile class implements projectiles which may be thrown
// 				by actors in the world
// Original Author: Ann Mei Chang (grenade.hp)
//                  LDH 01-19-96 cloned for Missile.hp
//===========================================================================

#ifndef _MISSILE_HP
#define _MISSILE_HP

//-----------------------------------------------------------------------------

#include "actor.hp"
#include "oas/missile.ht"

struct _Missile;

class Missile: public Actor
{
public:
	Missile(const SObjectStartupData* startupData);
	virtual ~Missile();

	virtual EActorKind kind() const;
	virtual void predictPosition(const Clock& currentTime);
	virtual void update();

	INLINE int32 GetOwner();

private:
	INLINE const _Missile* getOad() const;

	void explode();					// called by other routines to do the explosion

	bool		_armed;
	Scalar		_timeToArm;
	Scalar		_timeToExplode;
	int32		_owner;				// actor index of owner
	Actor*		_target;
};

//============================================================================

Actor*
OadMissile(const SObjectStartupData* startupData);

//============================================================================
#if		USE_INLINE_DEFS || defined(_Missile_CC)
#include "missile.hpi"	// include all inline definitions as appropriate
#endif

//============================================================================
#endif // !_Missile_HP
//============================================================================
