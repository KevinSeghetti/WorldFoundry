//============================================================================
// Shield.hp:
// Copyright ( c ) 1995,1996,1997,1999,2000,2003 World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//===========================================================================
//	Abstract: Shield Header file
//	History:
//			Created	from object.hps using prep
//
//	Class Hierarchy:
//			none
//
//	Dependancies:
//
//	Restrictions:
//
//	Example:
//
//============================================================================

#ifndef _Shield_HP
#define _Shield_HP

//============================================================================

#include "level.hp"
#include "actor.hp"

//============================================================================

struct _Shield;

//============================================================================

class Shield: public Actor
{
public:
	Shield(const SObjectStartupData* startupData);
	virtual ~Shield();

	virtual EActorKind kind() const;

	virtual void update();

	virtual bool isVisible() const;
	virtual bool isVisible();
	bool isInvulnerable() const;		// kludge(?)

	// Shield-specific functions
	void operator++();
	void operator--();
	int32 operator()() const			{ return _shieldLevel; }

protected:
	int32 _shieldLevel;
	Scalar _invulnerableUntil;
	Scalar _displayUntil;
	Scalar _toggleWhen;
	bool _bDisplayed;
	int32 _owner;				// actor index of owner

private:
	INLINE const _Shield* getOad() const;
};

//============================================================================

Actor* OadShield( const SObjectStartupData* startupData );

//============================================================================
#if		USE_INLINE_DEFS || defined(_Shield_CC)
#include "shield.hpi"	// include all inline definitions as appropriate
#endif
//============================================================================
#endif // !_Shield_HP
//============================================================================

