//===========================================================================
// disktoc.hpi:
// Copyright ( c ) 1998,99 World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//===========================================================================
// Description:
// Original Author: Kevin T. Seghetti
//=============================================================================

#if DO_ASSERTIONS
inline int32
DiskTOC::GetName() const
{
	return _name;
}
#endif

//=============================================================================

inline void
DiskTOC::Validate() const
{
#if DO_VALIDATION
	assert(_tocEntries > 0);
	assert(ValidPtr(_toc));
#endif
}

//=============================================================================

inline const DiskTOC::TOCEntry&
DiskTOC::GetTOCEntry(int index)
{
	assert(index >= 0);
	assert(index < _tocEntries);
	Validate();
	return _toc[index];
}

//=============================================================================

#if SW_DBSTREAM

inline std::ostream&
operator<<(std::ostream& s, const DiskTOC& diskTOC)
{
	diskTOC.Validate();
	s << "DiskTOC: Entries = " << diskTOC._tocEntries << std::endl;
	for(int index=0;index<diskTOC._tocEntries;index++)
		s << "  Offset: " << diskTOC._toc[index]._offsetInDiskFile << ", size = " << diskTOC._toc[index]._size << std::endl;
	return s;
}

#endif
//=============================================================================
