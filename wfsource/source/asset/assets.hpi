//===========================================================================
// assets.hpi: AssetManager class
// Copyright ( c ) 1997,1999,2000,2001,2002,2003 World Foundry Group  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//===========================================================================
// Description: manages all of the assets loaded by each room (also handles permanents)
// Original Author: Kevin T. Seghetti
//=============================================================================

#include <iff/iffread.hp>

//==============================================================================
                                
inline AssetSlot&
AssetManager::GetAssetSlot(int slotNum)
{
	assert(slotNum >= 0);
	assert(slotNum < MAX_ACTIVE_SLOTS);
	assert( ValidPtr( _assets[ slotNum ] ) );
	return *_assets[slotNum];
}

//=============================================================================
// designed to request data one sector at a time

inline void
AssetManager::LoadTOC(_DiskFile& diskFile, int32 tocOffset)
{
	_levelTOC.LoadTOC(diskFile, tocOffset);
	AssertMsg(_levelTOC.GetName() == IFFTAG('L','V','A','S'),"lvasTag = " << (void*)_levelTOC.GetName());
}

//=============================================================================

inline const DiskTOC::TOCEntry&
AssetManager::GetTOCEntry(int index)
{
	return _levelTOC.GetTOCEntry(index);
}

//=============================================================================

inline const char*
AssetManager::LookupAssetName(packedAssetID matteID)
{
	int index;
	for(index=0;index<_assetStringMapEntries && _assetStringMap[index]._id != matteID;index++)
	{
//		std::cout << "checking " << hex << _assetStringMap[index]._id << "," << _assetStringMap[index]._name << std::endl;
	}
	assert(index != _assetStringMapEntries);  // did not find it
	return _assetStringMap[index]._name;
}

//============================================================================

