//============================================================================
// pointercontainer.hpi
// Copyright (c) 2003 World Foundry Group   
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//============================================================================
// Author: Kevin T. Seghetti
//============================================================================

template< class T>
PointerContainer<T>::PointerContainer()
{
   _ptr = NULL;
   _memory = NULL;
}

//==============================================================================

template< class T> void
PointerContainer<T>::Set(T* ptr,Memory* memory)
{
   assert(ValidPtr(ptr));
   assert(_ptr == NULL);
   assert(ValidPtr(memory));
   _ptr = ptr;
   _memory = memory;
}

//==============================================================================

template< class T> void
PointerContainer<T>::Delete()
{
    assert(ValidPtr(_ptr));
    assert(ValidPtr(_memory));
	MEMORY_DELETE(*_memory,_ptr,T);
    _memory = NULL;
    _ptr = NULL;
}

//==============================================================================

template< class T>
PointerContainer<T>::~PointerContainer()
{
	MEMORY_DELETE(*_memory,_ptr,T);
}
   
//==============================================================================

template< class T> T& 
PointerContainer<T>::operator*()
{
   assert(ValidPtr(_ptr));
   return *_ptr;
}

//==============================================================================

template< class T> T* 
PointerContainer<T>::operator->()
{
   assert(ValidPtr(_ptr));
   return _ptr;
}
                       
//==============================================================================

template< class T>
PointerContainer<T>::operator T*()
{
   return _ptr;
}

//==============================================================================

