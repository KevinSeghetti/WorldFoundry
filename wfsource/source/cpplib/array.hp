//============================================================================
// array.hp
// Copyright (c) 1996,1997,1998,1999,2000,2002,2003 World Foundry Group   
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//============================================================================
// Author: Kevin T. Seghetti
//============================================================================

#ifndef _ARRAY_HP
#define _ARRAY_HP

#include <pigsys/pigsys.hp>
#include <memory/memory.hp>
#include <hal/hal.h>             // for HALLMalloc

//==============================================================================
// Array<T>: a container containing an array of class T


template <class T> class ArrayIter;
template <class T> class ArrayIterConst;

template <class T>
class Array
{
public:
	Array();
	Array(int32 entries, Memory* memory=&HALLmalloc);
	~Array();
	void SetMax( int32 entries, Memory* memory=&HALLmalloc);						// can only be called once, treat as a constructor
	void Add( T value );
	int32 Find( T value );				// returns offset of entry
	int32 Size() const;						// returns current # of entries
	const T& operator[]( int32 index ) const;
	T& operator[]( int32 index );

   void Validate() const;

   ArrayIterConst<T> begin() const;
   ArrayIter<T> begin();
   ArrayIterConst<T> end() const;
   ArrayIter<T> end();

	friend class ArrayIter<T>;
	friend class ArrayIterConst<T>;

private:
	T* _items;					// array of instances of T
	int _num;
	int _max;
   Memory* _memory;
};

//============================================================================
// iterate through all of the objects in an Array<T>

template <class T>
class ArrayIter
{
public:
	ArrayIter(Array<T>& array);
	ArrayIter<T>& operator++();
	ArrayIter<T>& operator+=(int offset);
	const T& operator*() const;				// dereference operator, returns the current actors index
	bool Empty() const;
	bool operator== (const ArrayIter<T>& i) const;
	ArrayIter<T>& operator= (const ArrayIter<T>& i);
    void Validate() const;
private:
	Array<T>* _pArray;
	int _itemIndex;
	ArrayIter();
};

//============================================================================
// iterate through all of the objects in an Array<T>

template <class T>
class ArrayIterConst
{
public:
	ArrayIterConst(const Array<T>& array);
	ArrayIterConst<T>& operator++();
	ArrayIterConst<T>& operator+=(int offset);
	const T& operator*() const;				// dereference operator, returns the current actors index
	bool Empty() const;
	bool operator== (const ArrayIterConst<T>& i) const;
    void Validate() const;
private:
	const Array<T>* _pArray;
	int _itemIndex;
	ArrayIterConst();
};

//==============================================================================
#include "array.hpi"
//==============================================================================
#endif // !_ARRAY_HP
//==============================================================================
