//==============================================================================
// DMalloc.hp
// Copyright ( c ) 1997,1998,1999,2000,2001,2003 World Foundry Group.  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//==============================================================================
// Description:
// Dynamic memory allocation class
//============================================================================
// use only once insurance

#ifndef _DMalloc_HP
#define _DMalloc_HP

//==============================================================================

#include <pigsys/pigsys.hp>
#include <streams/dbstrm.hp>
#include <memory/memory.hp>

//==============================================================================

class DMalloc : public Memory
{
public:
	DMalloc(Memory& memory, size_t size MEMORY_NAMED( COMMA const char* name ) );	// allocates from another DMalloc memory pool
//	DMalloc(void* memory, size_t size MEMORY_NAMED( COMMA const char* name ) );	// placement DMalloc, you provide the memory
	~DMalloc();

	virtual void* Allocate(size_t size ASSERTIONS( COMMA const char* file COMMA int line));
	virtual void Free(const void* mem);
	inline void Free(const void* mem,int32 size);
	virtual void Clear();						// warning: all previous allocations are now invalid

	virtual size_t BytesFree() const;         // returns # of bytes left in pool

	virtual bool ValidAllocation(void* memory);  // returns true if memory came from this
	virtual bool Empty() const;

protected:
#if DO_ASSERTIONS
	virtual void _Validate() const;					// check integrity of class
#endif
	IOSTREAMS( virtual std::ostream& _Print(std::ostream& out) const; )
private:
	enum { FLAG_MEMORY_OWNED=1 };

	int	  _flags;
	Memory* _parentMemory;
	char* _memory;
	char* _endMemory;

	class FreeChunk
	{
	public:
		inline FreeChunk(FreeChunk* next, int32 size);
		// default copy-constructor OK

		inline FreeChunk* Next() const;
		inline void Next(FreeChunk* next);
		inline int32 Size() const;
		inline void Size(int32 size);

		inline void Validate() const;
		IOSTREAMS( inline void _Print(std::ostream& out) const; )

	private:
		FreeChunk* _nextChunk;
		int32 _size;
	};


	class AllocatedChunk
	{
	public:
		AllocatedChunk(int32 size);
		// default copy-constructor OK

		inline int32 Size() const;

		inline void Validate() const;

	private:
		int32 _size;
#if DO_ASSERTIONS
		enum { ALLOCATED_COOKIE = 0xDEADBEEF /*'ALOC'*/ };
		uint32 _cookie;
#endif
	};

	FreeChunk* _firstChunk;
};

//==============================================================================
#include "dmalloc.hpi"	// include all inline definitions as appropriate
//==============================================================================
#endif	// _DMalloc_HP
//==============================================================================
