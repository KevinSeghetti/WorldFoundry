//==============================================================================
// realmalloc.hp
// Copyright ( c ) 1999,2000,2003 World Foundry Group.  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//==============================================================================
// Description:
// just forwards the requests to malloc, but does track the # of allocations
//============================================================================
// use only once insurance

#ifndef _REALMALLOC_HP
#define _REALMALLOC_HP

//==============================================================================

#include <pigsys/pigsys.hp>
#include <streams/dbstrm.hp>
#include <memory/memory.hp>

//==============================================================================

class RealMalloc : public Memory
{
public:
	RealMalloc(MEMORY_NAMED( const char* name ) );
	~RealMalloc();

	virtual void* Allocate(size_t size ASSERTIONS( COMMA const char* file COMMA int line));
	virtual void Free(const void* mem);
	inline void Free(const void* mem,int size);
	virtual void Clear();						// warning: all previous allocations are now invalid

	virtual size_t BytesFree() const;         // returns # of bytes left in pool

	virtual bool ValidAllocation(void* memory);  // returns true if memory came from this
	virtual bool Empty() const;

protected:
#if DO_ASSERTIONS
	virtual void _Validate() const;					// check integrity of class
#endif
	IOSTREAMS( virtual std::ostream& _Print(std::ostream& out) const; )
private:

	int		_flags;
	int		_allocationCount;
};

//==============================================================================
#include "realmalloc.hpi"	// include all inline definitions as appropriate
//==============================================================================
#endif	// _RealMalloc_HP
//==============================================================================
