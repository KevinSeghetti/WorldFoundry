//==============================================================================
// realRealMalloc.hpi
// Copyright ( c ) 1999,2000,2003 World Foundry Group.  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//==============================================================================
// Description:
// just forwards the requests to malloc, but does track the # of allocations
//============================================================================

INLINE bool
RealMalloc::Empty() const
{
	Validate();
	return _allocationCount;
}

//============================================================================

inline void
RealMalloc::Free(const void* mem,int /*size*/)
{
	free((void*)mem);
}

//=============================================================================

inline size_t
RealMalloc::BytesFree() const         // returns # of bytes left in pool
{
	assert(0);				            // not meaningfull
	return(0);
}

//=============================================================================

INLINE void
RealMalloc::Clear()
{
	Validate();
	assert(0);						    // not meaningfull
	_allocationCount = 0;
}

//============================================================================

inline bool
RealMalloc::ValidAllocation(void* memory)
{
	assert(0);					        // can't know right now
	assert(ValidPtr(memory));
//	if(memory >= _memory && memory < _endMemory)
//		return true;
	return false;
}

//============================================================================
