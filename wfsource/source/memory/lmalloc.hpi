//==============================================================================
// lmalloc.hpi
// Copyright ( c ) 1997,99,2000,2003 World Foundry Group.  
// Part of the World Foundry 3D video game engine/production environment
// for more information about World Foundry, see www.worldfoundry.org
//==============================================================================
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// Version 2 as published by the Free Software Foundation
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
// or see www.fsf.org

//==============================================================================
// Description:
// Sequential memory allocation class, usefull for temporary buffers which
// last a frame or so.
//============================================================================

INLINE bool
LMalloc::Empty() const
{
	Validate();
	return _currentFree == _memory;
}

//============================================================================

inline void
LMalloc::Free(const void* mem,int size)
{
   // kts 6/6/2003 12:43:10, I want to turn this back on and resolve all issues, but I am in
   // the middle of other large changes right now
	(void)size;
   //assert((((char*)mem) + size) == _currentFree);
	Free(mem);
}

//=============================================================================

inline size_t
LMalloc::BytesFree() const         // returns # of bytes left in pool
{
	return(_endMemory - _currentFree);
}

//=============================================================================

INLINE void
LMalloc::Clear()
{
	Validate();
	_currentFree = _memory;
}

//============================================================================

inline bool
LMalloc::ValidAllocation(void* memory)
{
	assert(ValidPtr(memory));
//	if(memory >= _memory && memory < _endMemory && ((char*)memory)+size < _endMemory)
	if(memory >= _memory && memory < _endMemory)
		return true;
	return false;
}

//============================================================================
