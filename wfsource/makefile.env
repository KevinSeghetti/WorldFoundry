#===============================================================================
## wfsrc/Makefile.env: environment reading for source
## Macro Definitions -- most allow passing in a default from the environment
## or on the command line.  (Defaults are shown in parentheses.)
#===============================================================================
## PIGS_OBJS_DIR (..)
## WF_TARGET (win)	[win|psx]
## BUILDMODE (debug)    [buildmodes are listed in Makefile.bld]
## SCALAR_TYPE (x)	[x|f]
## PSX_DIR (../../../psxtools/psx)
## CCCARGS ()
## BUILD_DBSTREAM (3 if debug, 0 otherwise)	[0-5]
## MULTITHREADED (s)	[m|s]
## Windows Variables Only:
## 	SUBSYSTEM (console)	[windows|console]
##
## Test Suite Switches:
## TEST_PROG	$(LIB_NAME)test
#===============================================================================

.SUFFIXES :
.SUFFIXES :     .c .cc .asm

#===============================================================================

#TODO: kind of a kludge here to get this to appear first
!if "$(LIB_NAME)"
TOP-ALL : LIBRARY_NAMES_DEFINES OBJ_DIR PIGS_LIB
!endif

PIGS_DIR = $(WF_DIR)\source
WF_BIN_DIR=$(WF_DIR)\bin


OAD_DIR ?= $(WF_DIR)\levels.src\oad

INCLUDE = # Erase environment variable version
WF_TARGET?=win
BUILDMODE?=debug
PHYSICS_ENGINE?=wf
SCALAR_TYPE ?= fixed
PIGS_OBJS_DIR?=$(PIGS_DIR)\             # no backslash at eol
BUILD_STREAMING ?= hd

# LIB_DIR
# PIGS_LIB -- the library being built
# LIB_OBJS
BUILDMODE_LETTERS=$(BUILDMODE)
!include Makefile.bld

!include Makefile.$(WF_TARGET)

CC = $(CC_$(WF_TARGET))
CCC = $(CCC_$(WF_TARGET))
CCC_OUT = $(CCC_OUT_$(WF_TARGET))
CCCARGS += $(CCCARGS_$(WF_TARGET))
LIBS += $(LIBS_$(WF_TARGET))
INCLUDE += $(INCLUDE_$(WF_TARGET))
#?LINKPOST
AR = $(AR_$(WF_TARGET))
LIBOUT = $(LIBOUT_$(WF_TARGET))
EXE = $(EXE_$(WF_TARGET))
RUN = $(RUN_$(WF_TARGET))
AS = $(AS_$(WF_TARGET))
AFLAGS = $(AFLAGS_$(WF_TARGET))
#?RESOURCE

################################################################################

INCLUDE += -I$(WF_TARGET) -I$(PIGS_DIR)
#?

# switches into defines
CCCARGS += -DSCALAR_TYPE_$(SCALAR_TYPE,UC)
CCCARGS += -DPHYSICS_ENGINE_$(PHYISICS_ENGINE,UC)


## Multithreaded switches
CCCARGS += $(CCCARGS_MULTITHREADED_$(MULTITHREADED,UC))

## Define platform
CCCARGS += -D__$(WF_TARGET,UC)__


# kts wish the loop executed in pass 1, not as a rule
LIBRARY_NAMES_DEFINES .ALWAYS :
#  %foreach Dir pigsys cpplib iff math streams anim attrib audio audiofmt gfxfmt console gfx hal input savegame toolstub version ini fuzzy physical movement loadfile audiofmt gfxfmt attrib particle timer menu
#    %set $(Dir,uc) $(PIGS_OBJ_DIR)\$(Dir).lib
#    %echo $($(Dir,UC))
#  %end


ANIM      = $(PIGS_LIB_DIR)anim.lib
ASSET     = $(PIGS_LIB_DIR)asset.lib
ATTRIB    = $(PIGS_LIB_DIR)attrib.lib
AUDIO     = $(PIGS_LIB_DIR)audio.lib
AUDIOFMT  = $(PIGS_LIB_DIR)audiofmt.lib
MOVEMENT = $(PIGS_LIB_DIR)movement.lib
MAILBOX  = $(PIGS_LIB_DIR)mailbox.lib
BASEOBJECT = $(PIGS_LIB_DIR)baseobject.lib
CONSOLE   = $(PIGS_LIB_DIR)console.lib
CPPLIB    = $(PIGS_LIB_DIR)cpplib.lib
EVAL      = $(PIGS_LIB_DIR)eval.lib
FUZZY     = $(PIGS_LIB_DIR)fuzzy.lib
GFX       = $(PIGS_LIB_DIR)gfx.lib
GFXFMT    = $(PIGS_LIB_DIR)gfxfmt.lib
HAL       = $(PIGS_LIB_DIR)hal.lib
IFF       = $(PIGS_LIB_DIR)iff.lib
IFFWRITE  = $(PIGS_LIB_DIR)iffwrite.lib
INI       = $(PIGS_LIB_DIR)ini.lib
INPUT     = $(PIGS_LIB_DIR)input.lib
LOADFILE  = $(PIGS_LIB_DIR)loadfile.lib
MATH      = $(PIGS_LIB_DIR)math.lib
MEMORY    = $(PIGS_LIB_DIR)memory.lib
MENU      = $(PIGS_LIB_DIR)menu.lib
PARTICLE  = $(PIGS_LIB_DIR)particle.lib
PHYSICS   = $(PIGS_LIB_DIR)physics.lib
PIGSYS    = $(PIGS_LIB_DIR)pigsys.lib
RECOLIB   = $(PIGS_LIB_DIR)recolib.lib
REGEXP    = $(PIGS_LIB_DIR)regexp.lib
REGISTRY  = $(PIGS_LIB_DIR)registry.lib
RENDERASSETS = $(PIGS_LIB_DIR)renderassets.lib
ROOM      = $(PIGS_LIB_DIR)room.lib
SAVEGAME  = $(PIGS_LIB_DIR)savegame.lib
STREAMS   = $(PIGS_LIB_DIR)streams.lib
SCRIPTING = $(PIGS_LIB_DIR)scripting.lib
TIMER     = $(PIGS_LIB_DIR)timer.lib
TOOLSTUB  = $(PIGS_LIB_DIR)toolstub.lib
VERSION   = $(PIGS_LIB_DIR)version.lib

#===============================================================================

# do renderer
!if "$(RENDERER)" == ""
!error no renderer defined!
!endif
CCCARGS += -DRENDERER_$(RENDERER,UC)

# do renderer pipeline
!if "$(RENDERER_PIPELINE)" == ""
!error no renderer pipeline defined!
!endif
CCCARGS += -DRENDERER_PIPELINE_$(RENDERER_PIPELINE,UC)

CCCARGS += -DPHYSICS_ENGINE_$(PHYSICS_ENGINE,UC)

RENDERER_PIPELINE_DIR = .\$(RENDERER_PIPELINE)pipeline
#RENDERER_PIPELINE_DIR = .\$(RENDERER_PIPELINE)

RENDERER_DIR	= .\$(RENDERER)

CCCARGS += -DBUILD_NAME="$(BUILDMODE)"
CCCARGS += -DDO_DEBUGGING_INFO=$(BUILD_DO_DEBUGGING_INFO)
CCCARGS += -DDEBUG=$(BUILD_DO_DEBUG_VARIABLES)
CCCARGS += -DDO_ASSERTIONS=$(BUILD_DO_ASSERTIONS)
CCCARGS += -DDO_VALIDATION=$(BUILD_DO_VALIDATION)
CCCARGS += -DDEBUG_VARIABLES=$(BUILD_DO_DEBUG_VARIABLES)
CCCARGS += -DDO_TEST_CODE=$(BUILD_DO_TEST_CODE)
CCCARGS += -DDO_DEBUG_FILE_SYSTEM=$(BUILD_DO_DEBUG_FILE_SYSTEM)
CCCARGS += -DDO_IOSTREAMS=$(BUILD_DO_IOSTREAMS)
!if "$(BUILD_DO_ASSERTIONS)" == "0"
CCCARGS += -DNDEBUG
!endif

#===============================================================================

CCCARGS += -DSW_DBSTREAM=$(BUILD_DBSTREAM)
#!if "$(SOFTWARE_RENDERER)" == "true"
#CCCARGS += -DSOFTWARE_RENDERER
#!endif

!if "$(BUILD_STREAMING)" == "off"
PIGSLIB_STREAM_LETTER = o
!else
PIGSLIB_STREAM_LETTER = s
!endif

#===============================================================================
# OBJ_DIR dir letters, left to right	[ Filename: ]
#	obj
#	BUILDMODE_LETTERS	: 	d, r		(debug, release)
# 	x, f		(fixed, float math)
#   s, o        (hard disk streaming/cd streaming, streaming off)
#   (), m       (single threaded, multi threaded)
#	.               [ Extension: ]
#	win,psx		(target)
#===============================================================================

OBJ_LETTERS=obj$(BUILDMODE_LETTERS)$(SCALAR_TYPE)$(PIGSLIB_STREAM_LETTER)$(MULTITHREADED).$(WF_TARGET)

# directory containing all pigs library sub-directories
PIGS_OBJ_DIR  = $(PIGS_OBJS_DIR)\$(OBJ_LETTERS)
PIGS_LIB_DIR  = $(PIGS_OBJ_DIR)\                # no backslash at eol

#===============================================================================
# only used by PIGS
# directory containing current pigs library

LIB_OBJ_DIR=$(PIGS_LIB_DIR)$(LIB_NAME)\	#
PIGS_LIB = $(PIGS_LIB_DIR)$(LIB_NAME).lib

#===============================================================================

################################################################################
## Rules

.PATH.cc = .;.\$(RENDERER_PIPELINE_DIR);$(RENDERER_DIR);.\$(WF_TARGET)\;
#.PATH.cc = .;.\$(WF_TARGET)\;
.PATH.c = .;$(WF_TARGET)
.PATH.asm = .;$(WF_TARGET)

#TODO: kinda kludgey -- this allows OBJ_DIR to be defined automatically for
#libraries, but lets the tools predefine it themselves
OBJ_DIR ?= $(LIB_OBJ_DIR)
!include Makefile.rul

OBJ_DIR  :
	@-if not exist $(OBJ_DIR) mkdir /s $(OBJ_DIR) >&nul
