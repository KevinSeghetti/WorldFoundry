#!/usr/local/bin/perl
#==============================================================================
# by William B. Norris IV
# Copyright (c) 1997-2001, World Foundry Group  
# Part of the World Foundry 3D video game engine/production environment
# for more information about World Foundry, see www.worldfoundry.org
#==============================================================================
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# Version 2 as published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
# or see www.fsf.org
#
# ------------------------------------------------------------------------

$DESIGNER = "designer";
$PROGRAMMER = "programmer";

$target_win = "win";
$target_psx = "psx";

################################################################################
# main

$base_dir = <STDIN>;
chop $base_dir;

$base_dir =~ tr/A-Z/a-z/;
$base_dir =~ /(.*\\)(.+)$/;
$level_dir = $2;
#print "base_dir = [$base_dir], level_dir = [$level_dir]\n";

$target = shift;
#$target = $ENV{ "WF_TARGET" } if ( $target eq "" );
#$target = $target_win if ( $target eq "" );
# kts changed 11/16/99 2:08PM was having trouble reading env variable
$target = $target_win;
$target =~ tr/A-Z/a-z/;					# Convert entire line to lowercase

$asset_dir = "..\\..\\assets";
$target_asset_dir = $asset_dir . "\\$target";
$level_asset_dir = $target_asset_dir . "\\$level_dir";


open( DEP, ">Makefile" ) || die( "Can't open dep file" );

$line_separator = "#" x 80 . "\n";

print DEP $line_separator;
print DEP "## Makefile for $base_dir\n";
print DEP "## Generated by makelvl.pl -- DO NOT MODIFY\n";
print DEP "## Copyright 1997-2001 World Foundry Group.\n";
print DEP $line_separator;
print DEP "\n";

print DEP ".SUFFIXES:\n";
print DEP ".SUFFIXES: .iff .ini .max\n";
print DEP "\n";

print DEP "## Programs\n";
$bindir = "..\\..\\bin\\";
print DEP "TEXTILE = " . $bindir . "textile.exe\n";
print DEP "IFFCOMP = " . $bindir . "iffcomp.exe\n";
print DEP "IFF2LVL = "."$bindir"."iff2lvl.exe\n";
print DEP "PREP = " . $bindir . "prep.exe\n";
print DEP "TEMPLATE = " . $bindir . "template.exe\n";
print DEP "\n";

$level_dep = "";

while ( <> )
{
	chop;
	tr/A-Z/a-z/;					# Convert entire line to lowercase
	# Remove current directory
	$_ = substr( $_, length( $base_dir ) + 1 );

	# Check for level
	/(^$level_dir)(\.max)$/i;
#	print "\$_=[$_] \$1=[$1] \$2=[$2]\n";

	if ( $1 eq $level_dir )
	{
		$level_name = $1;
#		print "FOUND LEVEL: \$_=[$_] \$1=[$1] \$2=[$2] \$level_dir=[$level_dir]\n";

		&add_dir( $level_asset_dir );

#		$asset_lst = "$level_asset_dir\\asset.lst";
		$ini_file = "$level_asset_dir\\$level_name.ini";
		$lvl = "$level_asset_dir\\$level_name.lvl";
		$lev = "$level_name.lev";
		$levbin = "$level_name.lev.bin";
		$ini = "$level_asset_dir\\$level_name.ini";
		$tga = "$level_asset_dir\\perm.tga";
		$str_intermediate_src = "$level_asset_dir\\$level_name.iff.txt";
		$str_intermediate = "$target_asset_dir\\$level_name.iff";

		$level_dep = "$level_name : $level_asset_dir";
		$level_dep .= " Folder.htt";

		$rules .= "$level_asset_dir : \n";
		$rules .= "\tmkdir /S $level_asset_dir\n";
		$rules .= "\n";

		$rules .= "Folder.htt : ..\\level.htm\n";
		$rules .= "\t\$(TEMPLATE) \$(.SOURCE) LEVELNAME=$level_name LEVELDIR=$level_name \>Folder.htt\n";
		$rules .= "\n";

		$level_dep .= " $tga";

        $rules .= "$lev.bin : $lev\n"; 
        $rules .= "\t\$(IFFCOMP) -o=$lev.bin $lev\n";
		$rules .= "\n";

        $rules .= "$lvl : $lev.bin\n"; 
        $rules .= "\t\$(IFF2LVL) $levbin ..\\oad\\objects.lc $lvl\n";
		$rules .= "\n";

		$rules .= "$tga : $lvl $ini \$(TEXTILE)\n";
#		$textile_opts  = "-T$target -transparent=0,255,0";
		$textile_opts  = "-T$target -transparent=0,0,0";
		$textile_opts .= " -colourcycle=ccyc.ini" if ( -e "ccyc.ini" );
		$textile_opts .= " -pagex=256 -pagey=256 -powerof2size";
		$textile_opts .= " -permpagex=256 -permpagey=256 ";
		$textile_opts .= " -palx=256 -paly=8";
		$textile_opts .= " -alignx=w -aligny=h -flipyout ";
		$textile_opts .= " -outdir=../../assets/$target/$level_name";
		$rules .= "\t\$(TEXTILE) $textile_opts -ini=$ini\n";
		$rules .= "\n";

		$rules .= "$str_intermediate : $str_intermediate_src $level_asset_dir\\room0.tga\n";
#		$rules .= "\t( cd $level_asset_dir \$(COMMAND_SEPARATOR) \$(IFFCOMP,A) -o=\$(.TARGET,A) \$(.SOURCE,A) )\n";
		$rules .= "\t\@\%chdir $level_asset_dir\n";
		$rules .= "\t\$(IFFCOMP,A) -o=\$(.TARGET,A) \$(.SOURCE,A)\n";
		$rules .= "\t\@\%chdir \$(CWD)\n";
		$rules .= "\n";
		$rules .= "$str_intermediate_src : ..\\iff.prp $level_asset_dir\\asset.inc $level_asset_dir\\ram.iff.txt \$(PREP)\n";
#		$rules .= "\t( cd $level_asset_dir \$(COMMAND_SEPARATOR) \$(PREP,A) \$(\.SOURCE,A) \$(\.TARGET,A) )\n";
#		$rules .= "\t\@%chdir $level_asset_dir\n";
		$rules .= "\t\$(PREP,A) -DASSETINCPATH=$level_asset_dir\\ \$(\.SOURCE,A) \$(\.TARGET,A) )\n";
#		$rules .= "\t\@%chdir \$(CWD)\n";
		$rules .= "\n";

		$rules .= "$level_asset_dir\\ram.iff.txt : ram.iff.txt\n";
		$rules .= "\tcopy \$(\.SOURCE,A) \$(\.TARGET,A)\n";
		$rules .= "\n";

		$level_dep .= " $ini_file";
		$rules .= "$ini_file : ..\\ini.prp $level_asset_dir\\asset.inc \$(PREP)\n";
#		$rules .= "\t( cd $level_asset_dir \$(COMMAND_SEPARATOR) \$(PREP,A) \$(\.SOURCE,A) \$(\.TARGET,A) )\n";
#		$rules .= "\t\@\%chdir $level_asset_dir\n";
		$rules .= "\t\$(PREP,A) -DASSETINCPATH=$level_asset_dir\\ \$(\.SOURCE,A) \$(\.TARGET,A)\n";
#		$rules .= "\t\@\%chdir \$(CWD)\n";
		$rules .= "\n";

#		$level_dep .= " $asset_lst";
#		$rules .= "$asset_lst : ..\\asset.prp $level_asset_dir\\asset.inc \$(PREP)\n";
#		$rules .= "\t\@\%chdir $level_asset_dir\n";
#		$rules .= "\t\$(PREP,A) \$(\.SOURCE,A) \$(\.TARGET,A)\n";
#		$rules .= "\t\@\%chdir \$(CWD)\n";
#		$rules .= "\n";
	}
	else
	{	# Try for an .iff file
		/(.*)((\.iff)|(\.map)|(\.wav))$/i;
#		print "Checking $_ [$1][$2]\n";
		if ( $2 eq ".iff" )
		{
			$level_dep .= " $level_asset_dir\\$1.iff";
			$rules .= "$level_asset_dir\\$1.iff : $1.iff\n";
			$rules .= "\t\@mkdir /S $level_asset_dir\\$1\n";
			$rules .= "\tcopy \$(\.SOURCE) \$(\.TARGET)\n";
			#$rules .= "\t$(IFFCOMP) -binary -o=\$(\.TARGET) \$(\.SOURCE)\n";
			$rules .= "\n";
		}
		elsif ( ( $2 eq ".map" ) || ( $2 eq ".wav" ) )
		{
#			print "found wave $1$2\n";
			$level_dep .= " $level_asset_dir\\$1$2";
			$rules .= "$level_asset_dir\\$1$2 : $1$2\n";
			$rules .= "\tcopy \$(\.SOURCE) \$(\.TARGET)\n";
			$rules .= "\n";
		}
		else
		{
			#print "Unprocessed file: [$_]\n";
		}
	}
}


if ( $level_name eq "" )
{
	print "No level [$level_dir].max found -- no Makefile created\n";
	close DEP;
	unlink( "Makefile" );
	exit;
}

$level_dep .= " $str_intermediate";

print DEP "all : $level_name CD PAUSE\n\n";

print DEP $line_separator;
print DEP "\n";
print DEP "$level_dep\n";
print DEP "\n";
print DEP "$rules";


# Output rules to create directories
print DEP "## Directory structure\n";
print DEP "\n";

# kts removed 4/9/01 5:21PM since /S does it above
#while ( ( $index, $dep ) = each( %dir_deps ) )
#{
#	chop $index if $index ne "";	# Remove trailing "\"
#	chop $dep if $dep ne "";  		# Remove trailing "\"
##	print STDERR "[$index] [$dep]\n";
#	print DEP "$index : $dep\n\t-mkdir \$(.TARGET)\n\n";
#}


print DEP $line_separator;
print DEP "\nclean :\n";
print DEP "\tdel $str_intermediate \n";
#print DEP "\tdel /s $level_asset_dir\\*.*\n";
print DEP "\tdel $level_asset_dir\\*.iff\n";
print DEP "\tdel $level_asset_dir\\*.map\n";
print DEP "\tdel $level_asset_dir\\*.wav\n";
print DEP "\tdel $level_asset_dir\\*.tga\n";
print DEP "\tdel $level_asset_dir\\*.ruv\n";
print DEP "\tdel  $level_asset_dir\\*.cyc\n";
print DEP "\tdel  $level_asset_dir\\*.ini\n";
print DEP "\tdel Makefile\n";
print DEP "\tdel xdata.ai* objects.id\n";
print DEP "\tdel textile.dat textile.log.htm\n";
print DEP "\tdel $level_asset_dir\\*.iff.txt\n";
print DEP "\tdel files.lst\n";
print DEP "\tdel Folder.htt\n";
print DEP "\tdel template.log\n";
print DEP "\t-rmdir $level_asset_dir\n";
print DEP "\tdel $level_name.lev.bin\n";
print DEP "\tdel assetdir.bat\n";
print DEP "\n";

print DEP $line_separator;
print DEP "\nCD : \n";
print DEP "\t\@%chdir ..\n";
print DEP "\t\@touch levels.txt\n";
print DEP "\t\@make cd\n";
print DEP "\t\@%chdir \$\(cwd\)\n";
print DEP "\n";

print DEP $line_separator;
print DEP "\nPAUSE :\n";
print DEP "\t\@pause Review error messages; press any key when ready...\n";
print DEP "\n";

print DEP $line_separator;
print DEP "\n.AFTER :\n";
print DEP "\t\%if \$(MAKESTATUS) != 0\n";
print DEP "\t\t\@pause Review error messages; press any key when ready...\n";
print DEP "\t\%endif\n";
print DEP "\n";
print DEP $line_separator;

close DEP;


###############################################################################
# Adds given directory to the list of directory dependencies ($dir_deps)
# Also adds each of the directory's parents to the list
sub add_dir
{
	local( $path ) = @_;
	local( $new_dir, $old_dir );

	@path_parts = split( /\\/, $path );
	foreach $i ( @path_parts )
	{
#		print STDERR "$new_dir\n";
		$new_dir .= $i . "\\";
		$dir_deps{ $new_dir } = $old_dir
			if ( $new_dir =~ /.*\\.+/ && $old_dir =~ /.*\\.+/ );
		$old_dir = $new_dir;
	}
}
